# -*- coding: utf-8 -*-
"""detect_mask_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13YmXdf-On3vTnZRMep0YxXtFo_eUoMm4

# **Author:- SIBASIS SAHOO**
"""

import cv2
import numpy as np
import imutils
import time
from torchvision import models,transforms
import pickle
import torch
from torch.utils.data import DataLoader
from google.colab.patches import cv2_imshow

!git clone https://github.com/Sibasis555/Face_mask_detection

# load our serialized face detector model from disk
prototxtPath = r"/content/Face_mask_detection/face_detector/deploy.prototxt"
weightsPath = r"/content/Face_mask_detection/face_detector/res10_300x300_ssd_iter_140000.caffemodel"
faceNet = cv2.dnn.readNet(prototxtPath, weightsPath)

# load the face mask detector model from disk
maskNet =  pickle.load(open('/content/Face_mask_detection/face_mask_detection_model.pkl', 'rb'))
maskNet.eval()

transform=transforms.Compose([
                              transforms.ToPILImage(),
                              transforms.Resize(224),
                              transforms.CenterCrop(224),
                              transforms.ToTensor(),
                              transforms.Normalize(mean=[0.485,0.456,0.406],std=[0.229,0.224,0.225])
])

image=cv2.imread(r'/content/Face_mask_detection/IMG20200219154935.jpg')

h,w=image.shape[:2]
blob=cv2.dnn.blobFromImage(image,1.0,(300,300),(104.0,177.0,123.0))
faceNet.setInput(blob)
detection=faceNet.forward()

for i in range(0,detection.shape[2]):
  confidence=detection[0,0,i,2]

  if confidence>0.5:
    #we need the X,Y coordinats
    box=detection[0,0,i,3:7]*np.array([w,h,w,h])
    (startX,startY,endX,endY)=box.astype('int')
    #ensure the bounding boxes fall within the dimentions of the frame
    (startX,startY)=(max(0,startX), max(0,startY))
    (endX,endY)=(min(w-1,endX), min(h-1,endY))
    #extract face ROI,conver it from BGR to RGB,resize it to 224,224
    face=image[startY:endY, startX:endX]
    face=cv2.cvtColor(face,cv2.COLOR_BGR2RGB)
    
    face=transform(face)
    face=face.cuda()
    face=face.unsqueeze(0)
    maskNet.eval()
    with torch.no_grad():
      preds=maskNet(face)[0]
      (with_mask,without_mask)=preds
    label='With_mask' if with_mask>without_mask else 'No_mask'
    color=(0,255,0) if label=='With_mask' else (0,0,255)
    #include the probability in the label
    label="{}: {:.2f}%".format(label,max(with_mask,without_mask)*100)
    #display the label and bounding boxes
    cv2.putText(image,label,(startX,startY-10),cv2.FONT_HERSHEY_SIMPLEX,2,color,4)
    cv2.rectangle(image,(startX,startY),(endX,endY),color,7)

cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()

